/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package pack1;

//GUMAGANA SANA ITO KASO DIKO MA CLOSE YUNG CURRENT FRAME KAPAG NAG-ADD PEOPLE AKO (PAG NAG ANOTHER PANEL), DIKO MA DISPOSE() / CLOSED() YUNG FRAME - DEANNE

import java.sql.*;
import java.awt.*;
import java.util.Arrays;
import java.util.logging.*;
import javax.swing.*;
import javax.swing.table.*;

/**
 *
 * @author Win10
 */

public class BlacklistPanel extends javax.swing.JPanel {
    int count = 1;
    int rowCount;
    /**
     * Creates new form BlacklistPanel
     */
    public BlacklistPanel() {
        initComponents();
        tableDesign();
        jTable2ColumnSize();
        viewBL();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
     public void tableDesign(){
        DefaultTableCellRenderer head_render = new DefaultTableCellRenderer(); 
        head_render.setBackground(new Color(30,30,30));
        head_render.setForeground(Color.white);
        head_render.setFont(new Font ("Calibri",Font.BOLD,18));
        jTable2.getTableHeader().setDefaultRenderer(head_render); 
    }
    public void jTable2ColumnSize(){
        TableColumnModel columnModel = jTable2.getColumnModel();
        columnModel.getColumn(2).setPreferredWidth(5);
        columnModel.getColumn(3).setPreferredWidth(100);
    }
    
     public void viewBL(){
        try{
                String hostname = "localhost";
                String sqlInstanceName = "DESKTOP-6H3R89U\\JAVACONNECT"; //computer name 
                String sqlDatabase = "VisitorMS";  //sql server database name
                String sqlUser = "sa";
                String sqlPassword = "java"; //passwrod sa account

                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");

                String connectURL = "jdbc:sqlserver://" + hostname + ":1433" 
                            + ";instance=" + sqlInstanceName + ";databaseName=" + sqlDatabase
                    +";encrypt=true;trustServerCertificate=true";

                Connection conn = DriverManager.getConnection(connectURL, sqlUser, sqlPassword);
                System.out.println("Connect to database successful!!");    

                Statement st = conn.createStatement();
                //ms sql query
                String sql = "select * from blacklist order by visitorid";
                ResultSet rs = st.executeQuery(sql);

                while(rs.next()){
                    String id = String.valueOf(rs.getInt("visitorid"));
                    String name = rs.getString("name");
                    String sex = rs.getString("sex");
                    String address = rs.getString("address");
//                    String date = String.valueOf(rs.getDate("visitdate"));


                    //array
                    String blDate [] = {id,name,sex,address/*,date*/};
                    DefaultTableModel tb2Model = (DefaultTableModel)jTable2.getModel();


                    //add string array data into jtable

                    tb2Model.addRow(blDate);
                    
                }
                rs.close();
                
                rowCount = jTable2.getRowCount();            
                blacklist.setText("Blacklist ("+rowCount+")");
                
                conn.close();

            }catch(SQLException e){
                e.printStackTrace();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(MenuFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
    }

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        blacklist = new javax.swing.JLabel();
        addBL = new javax.swing.JLabel();
        addNewPeople = new javax.swing.JButton();
        unblock = new java.awt.Button();
        search = new java.awt.Button();
        Searchtextfield = new java.awt.TextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1280, 749));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
        });

        blacklist.setFont(new java.awt.Font("Calibri", 1, 50)); // NOI18N
        blacklist.setForeground(new java.awt.Color(30, 30, 30));
        blacklist.setText("Blacklist");

        addBL.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        addBL.setForeground(new java.awt.Color(133, 133, 133));
        addBL.setText("Add a blacklist of people you don’t want to enter the subdivision");

        addNewPeople.setBackground(new java.awt.Color(46, 110, 76));
        addNewPeople.setFont(new java.awt.Font("Calibri", 1, 20)); // NOI18N
        addNewPeople.setForeground(new java.awt.Color(255, 255, 255));
        addNewPeople.setText("+ Add New People");
        addNewPeople.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewPeopleActionPerformed(evt);
            }
        });

        unblock.setBackground(new java.awt.Color(46, 110, 76));
        unblock.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        unblock.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        unblock.setForeground(new java.awt.Color(255, 255, 255));
        unblock.setLabel("UNBLOCK");
        unblock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unblockActionPerformed(evt);
            }
        });

        search.setBackground(new java.awt.Color(217, 217, 217));
        search.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        search.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        search.setForeground(new java.awt.Color(133, 133, 133));
        search.setLabel("Search");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        Searchtextfield.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        Searchtextfield.setForeground(new java.awt.Color(30, 30, 30));
        Searchtextfield.setText("Search...");
        Searchtextfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchtextfieldActionPerformed(evt);
            }
        });
        Searchtextfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SearchtextfieldKeyReleased(evt);
            }
        });

        jTable2.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Sex", "Address", "Phone Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setFocusCycleRoot(true);
        jTable2.setFocusable(false);
        jTable2.setGridColor(new java.awt.Color(255, 255, 255));
        jTable2.setName(""); // NOI18N
        jTable2.setRowHeight(25);
        jTable2.setSelectionBackground(new java.awt.Color(46, 110, 76));
        jTable2.setSelectionForeground(new java.awt.Color(255, 255, 255));
        jTable2.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jTable2.setShowGrid(false);
        jTable2.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addBL)
                        .addContainerGap(608, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Searchtextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(unblock, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(blacklist)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(addNewPeople))
                            .addComponent(jScrollPane2))
                        .addGap(35, 35, 35))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addNewPeople, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(blacklist))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addBL)
                .addGap(75, 75, 75)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(unblock, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(Searchtextfield, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(search, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(88, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void unblockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unblockActionPerformed
        int globalRowCount = rowCount-1;

        try{
            String hostname = "localhost";
            String sqlInstanceName = "DESKTOP-6H3R89U\\JAVACONNECT"; //computer name
            String sqlDatabase = "VisitorMS";  //sql server database name
            String sqlUser = "sa";
            String sqlPassword = "java"; //passwrod sa account

            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");

            String connectURL = "jdbc:sqlserver://" + hostname + ":1433"
            + ";instance=" + sqlInstanceName + ";databaseName=" + sqlDatabase
            +";encrypt=true;trustServerCertificate=true";

            Connection conn = DriverManager.getConnection(connectURL, sqlUser, sqlPassword);
            System.out.println("Connect to database successful!!");

            if(!Searchtextfield.getText().isEmpty()&&!"Search...".equals(Searchtextfield.getText())){
                int row=jTable2.getSelectedRow();
                if (jTable2.getRowSorter()!=null) {
                    row = jTable2.getRowSorter().convertRowIndexToModel(row);
                }
                String id = (jTable2.getModel().getValueAt(row, 0).toString());
                int visitorId = Integer.parseInt(id);
                Statement stmt = conn.createStatement();
                String query ="UPDATE visitor SET visitorstatus = 'Allowed' WHERE visitorid ="+visitorId;
                stmt.executeUpdate(query);

                blacklist.setText("Blacklist ("+globalRowCount+")");

                DefaultTableModel tb2ModelUnblock= (DefaultTableModel)jTable2.getModel();
                tb2ModelUnblock.removeRow(row);

            }
            else{
                //selection na madame
                int rowCount3 = jTable2.getSelectedRowCount();
                int []rowNum = jTable2.getSelectedRows();

                for(int i = 0; i<rowCount3;i++){
                    String id = (jTable2.getModel().getValueAt(rowNum[i], 0).toString());
                    int visitorId = Integer.parseInt(id);

                    Statement stmt = conn.createStatement();
                    String query ="UPDATE visitor SET visitorstatus = 'Allowed' WHERE visitorid ="+visitorId;
                    stmt.executeUpdate(query);

                    DefaultTableModel tb2ModelUnblock= (DefaultTableModel)jTable2.getModel();
                    tb2ModelUnblock.removeRow(rowNum[i]);

                    int rowCount2 = jTable2.getRowCount();
                    blacklist.setText("Blacklist ("+rowCount2+")");
                }

            }

            conn.close();

        }catch(SQLException e){
            e.printStackTrace();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MenuFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_unblockActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        DefaultTableModel tb2ModelSearch = (DefaultTableModel)jTable2.getModel();
        TableRowSorter<DefaultTableModel> obj = new TableRowSorter<>(tb2ModelSearch);
        jTable2.setRowSorter(obj);
        obj.setRowFilter(RowFilter.regexFilter(Searchtextfield.getText()));
    }//GEN-LAST:event_searchActionPerformed

    private void SearchtextfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchtextfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchtextfieldActionPerformed

    private void SearchtextfieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SearchtextfieldKeyReleased
        DefaultTableModel tb2ModelSearch = (DefaultTableModel)jTable2.getModel();
        TableRowSorter<DefaultTableModel> obj = new TableRowSorter<>(tb2ModelSearch);
        jTable2.setRowSorter(obj);
        obj.setRowFilter(RowFilter.regexFilter(Searchtextfield.getText()));

    }//GEN-LAST:event_SearchtextfieldKeyReleased

    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered
     
    }//GEN-LAST:event_formMouseEntered

    private void addNewPeopleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewPeopleActionPerformed
//        AddBlacklist newPeople = new AddBlacklist();
//        newPeople.setVisible(true);
    }//GEN-LAST:event_addNewPeopleActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.TextField Searchtextfield;
    private javax.swing.JLabel addBL;
    private javax.swing.JButton addNewPeople;
    private javax.swing.JLabel blacklist;
    private javax.swing.JScrollPane jScrollPane2;
    private static javax.swing.JTable jTable2;
    private java.awt.Button search;
    private java.awt.Button unblock;
    // End of variables declaration//GEN-END:variables
}
